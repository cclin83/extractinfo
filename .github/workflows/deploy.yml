name: Deploy React App to GitHub Pages # 工作流的名称

on:
  push:
    branches:
      - main # 当代码推送到 main 分支时触发此工作流

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest # 在 Ubuntu 系统上运行此任务

    steps:
    - name: Checkout code # 步骤1：拉取您的代码
      uses: actions/checkout@v4

    - name: Set up Node.js # 步骤2：设置 Node.js 环境
      uses: actions/setup-node@v4
      with:
        node-version: '18' # 使用 Node.js 18 LTS 版本

    - name: Install dependencies # 步骤3：安装项目依赖
      run: npm install

    - name: Build React App # 步骤4：构建 React 应用（生成静态文件）
      run: npm run build

    - name: Deploy to GitHub Pages # 步骤5：部署到 GitHub Pages
      uses: peaceiris/actions-gh-pages@v4 # 使用一个流行的 GitHub Action 来部署
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }} # GitHub 自动提供的安全令牌
        publish_dir: ./build # 指定要发布到 Pages 的文件夹（就是 npm run build 生成的）
        publish_branch: gh-pages # 指定发布到的分支（GitHub Pages 会从这里读取文件）

提交工作流文件：

在页面右上角，点击绿色的 "Commit changes..." (提交更改...) 按钮。

输入一个提交信息（例如：“Add GitHub Actions for Pages deployment”）。

选择 "Commit directly to the main branch" (直接提交到 main 分支)。

点击绿色的 "Commit changes" (提交更改)。

简单来说： 在 GitHub 仓库里，找到 Actions 选项卡，创建一个新文件 .github/workflows/deploy.yml，把上面提供的代码粘贴进去并提交。

步骤 2：修改项目里的一个文件 (package.json)
这个文件告诉您的项目如何运行和部署。

在 GitHub 上编辑 package.json 文件：

回到您的 GitHub 仓库页面。

在文件列表中找到 package.json 文件并点击它。

点击文件内容右上角的铅笔图标（"Edit this file"）来编辑它。

添加一行网站地址：

在文件里找到 "name": "..." 这一行（或者类似的一行），在它下面紧接着添加一行 homepage。

重要： 请把 <你的用户名> 替换成你的 GitHub 用户名，把 <你的仓库名> 替换成你 GitHub 仓库的名称。

注意逗号： 确保这行末尾有逗号 ,。

{
  "name": "你的仓库名",
  "version": "0.1.0",
  "private": true,
  "homepage": "https://<你的用户名>.github.io/<你的仓库名>",
  // ... 其他字段
}
